var globalWebhookId, globalHeaderCounter, globalDataCounter, rootJumpOption;

function searchOptions(from) {
  getAjax(`${window.location.origin}/retailers/chat_bots/${$('#cb-web-id').val()}/tree_options`, function(data) {
    var json = JSON.parse(data);
    var options = json['options'];
    if (from === 'general') {
      buildTree(options[0]);
    } else {
      $('#options-tree-modal').html('');
      buildTreeModal(options[0]);
    }
  });
}

function buildTree(option, parent) {
  if (!parent) {
    var listContainer = $('#options-tree');
  } else {
    var listContainer = $(`#options-li-tree-${parent.id}`);
  }

  var addChildBlocked = option.option_type === 'form' && option.children.length > 0;

  listContainer.append(
    `<ul id="options-ul-tree-${option.id}" class="chat-bot-option-ul ${!parent ? 'pl-12' : ''}">
    <li id="options-li-tree-${option.id}" class="chat-bot-option-li">
    <div class="li-content">
    <i class="fas fa-chevron-right fs-12 c-secondary mr-8"></i>
    ${insertTitle(option)}
    <span class="tree-options-links">
    <a class="ml-10 fs-12" href="javascript:;" onclick="addChildOption(${option.id}, ${addChildBlocked})">Agregar opción</a>
    <a class="ml-10 fs-12" href="${window.location.origin}/retailers/${$('#slug-id').val()}/chat_bots/${$('#cb-web-id').val()}/edit_chat_bot_option?option_id=${option.id}">Editar</a>
    <a class="ml-10 fs-12 delete" href="javascript:;" onclick="deleteOption(${option.id}, ${option.auto_generated})">Eliminar</a>
    <a class="ml-10 fs-12" href="javascript:;" onclick="buildConversation(${option.id})">Vista previa</a>
    </span></div></li>
    </ul>`
  )

  if (option.children.length > 0) {
    for (child in option.children) {
      buildTree(option.children[child], option);
    }
  }
}

function buildTreeModal(option, parent) {
  if (!parent) {
    var listContainer = $('#options-tree-modal');
  } else {
    var listContainer = $(`#options-li-tree-modal-${parent.id}`);
  }

  listContainer.append(
    `<ul id="options-ul-tree-${option.id}" class="chat-bot-option-ul ${!parent ? 'pl-12' : ''}">
    <li id="options-li-tree-modal-${option.id}" class="chat-bot-option-li">
    <div class="li-content">
    <i class="fas fa-chevron-right fs-12 c-secondary mr-8"></i>
    ${insertTitle(option)}
    <span class="tree-options-links">
      <label for="modal--toggle" class="ml-10 c-secondary fs-12" onclick="setJumpOption(${option.id}, '${option.text}')">Seleccionar</label>
    </span></div></li>
    </ul>`
  )

  if (option.children.length > 0) {
    for (child in option.children) {
      buildTreeModal(option.children[child], option);
    }
  }
}

function insertTitle(option) {
  let title = '';

  if (option.auto_generated) {
    title = `<span class="fs-14 c-gray-label">Opción dinámica</span>`;
  } else {
    title = `<span class="fs-14 fw-bold">${option.position}.</span> <span class="fs-14 c-gray-label">${option.text}</span>`;
  }

  if (option.jump_option_name && option.jump_option_name !== '') {
    title += ` <small class="fs-11">(Salta a la opción: <b>${option.jump_option_name}</b>)</small>`
  }

  return title;
}

function buildConversation(option_id) {
  getAjax(`${window.location.origin}/retailers/chat_bots/${$('#cb-web-id').val()}/path_option?option_id=${option_id}`, function(data) {
    var json = JSON.parse(data);
    var path = json['option'].data;

    var target = $('#chat-preview');
    target.html('');

    for (node in path) {
      var str = `<div class="w-100 row mt-10">
        <div class="sent-message-preview">
        <span>${path[node].attributes.auto_generated ? 'Se construye la opción dinámica' : path[node].attributes.answer}</span><br /><br />`

      if (path[node].attributes.option_type == 'decision' && path[node].attributes.children && path[node].attributes.children.length > 0) {
        for (child in path[node].attributes.children) {
          str += `<span><b>${path[node].attributes.children[child].position}.</b> ${path[node].attributes.children[child].text}</span><br />`
        }
      }

      if (path[node].attributes.option_type == 'form' && path[node].attributes.option_sub_list && path[node].attributes.option_sub_list.length > 0) {
        for (child in path[node].attributes.option_sub_list) {
          str += `<span><b>${path[node].attributes.option_sub_list[child].position}.</b> ${path[node].attributes.option_sub_list[child].value_to_show}</span><br />`
        }
      }

      str += '</div></div>'

      target.append(str)

      node_aux = parseInt(node);

      if ((path.length - 1) >= (node_aux + 1)) {
        target.append(
          `<div class="">
          <div class="my-10 received-message-preview">
          ${insertPreviewResponse(path[node_aux], path[node_aux + 1])}
          </div></div>`
        )
      }
    }
  });
}

function insertPreviewResponse(node, next_node) {
  if (node.attributes.option_type == 'form') {
    return `<span>Cliente envía respuesta</span>`
  } else {
    return `<span>${next_node.attributes.position}</span>`
  }
}

function showActionSelection(input) {
  const value = input.value;
  showHideActions(value);
  const id = input.id.replace("_action_type", "");
  const root = $(input).parent().parent().parent();
  root.find('.hide-on-selection').hide();
  root.find('.deactivate-on-selection').attr('disabled', true);
  let hideId, showId;

  switch (value) {
    case 'add_tag':
      $(input).addClass('validate-unique');
      hideId = `#${id}_target_field, #${id}_retailer_user_id, #${id}_exit_message, #${id}_jump_option_id`;
      showId = id + "_tag_ids";
      showHideSelectFields(value, hideId, showId);
      break;
    case 'assign_agent':
      $(input).addClass('validate-unique');
      hideId = `#${id}_tag_ids, #${id}_target_field, #${id}_exit_message, #${id}_jump_option_id`;
      showId = id + "_retailer_user_id";
      showHideSelectFields(value, hideId, showId);
      break;
    case 'get_out_bot':
      $(input).addClass('validate-unique');
      hideId = `#${id}_tag_ids, #${id}_target_field, #${id}_retailer_user_id, #${id}_jump_option_id`;
      showId = id + "_exit_message";
      showHideSelectFields(value, hideId, showId);
      break;
    case 'go_back_bot':
      $(input).addClass('validate-unique');
      root.find('.show-on-back-bot').show();
      break;
    case 'go_init_bot':
      $(input).addClass('validate-unique');
      root.find('.show-on-init-bot').show();
      break;
    case 'save_on_db':
      $(input).addClass('validate-unique');
      hideId = `#${id}_tag_ids, #${id}_retailer_user_id, #${id}_exit_message, #${id}_jump_option_id`;
      showId = id + "_target_field";
      showHideSelectFields(value, hideId, showId);
      break;
    case 'exec_callback':
      $(input).addClass('validate-unique');
      hideId = `#${id}_tag_ids, #${id}_retailer_user_id, #${id}_target_field, #${id}_exit_message, #${id}_jump_option_id`;
      showId = "webhook-action-container";
      setGlobalWebhookId(id);
      showHideSelectFields(value, hideId, showId, id);
      break;
    case 'auto_generate_option':
      $(input).addClass('validate-unique');
      root.find('.show-on-auto-generate-option').show();
      break;
    case 'repeat_endpoint_option':
      $(input).addClass('validate-unique');
      root.find('.show-on-repeat-endpoint-option').show();
      break;
    case 'jump_to_option':
      $(input).removeClass('validate-unique');
      hideId = `#${id}_tag_ids, #${id}_retailer_user_id, #${id}_target_field, #${id}_exit_message`;
      const enableId = id + '_jump_option_id';
      showHideJumpOption(hideId, enableId);
      root.find('.show-on-jump-to-option').show();
      break;
  }
}

function showHideSelectFields(action, hideId, showId, plainId) {
  hideInput = $(hideId);
  hideInput.parent().parent().hide();
  hideInput.attr('disabled', true);

  showInput = $(`#${showId}`);

  if (showId === 'webhook-action-container') {
    showWebhookData(plainId);
  } else {
    hideWebhookData(plainId);
    showInput.parent().parent().show();
    showInput.attr('disabled', false);
  }

  if (action === 'add_tag') {
    $(`#${showId}`).select2({
      placeholder: "Selecciona o elimina etiquetas",
      language: "es",
      maximumSelectionLength: 5
    });
  }
}

function showWebhookData(id) {
  $(`#${id}_webhook`).parent().parent().show();
  $(`#${id}_webhook`).attr('disabled', false);
  $(`#${id}_action_event`).attr('disabled', false);
  $(`#${id}_payload_type`).attr('disabled', false);
  $(`#${id}_username`).attr('disabled', false);
  $(`#${id}_password`).attr('disabled', false);
  $("input.input-header").attr('disabled', false);
}

function hideWebhookData(id) {
  $(`#${id}_webhook`).parent().parent().hide();
  $(`#${id}_webhook`).attr('disabled', true);
  $(`#${id}_action_event`).attr('disabled', true);
  $(`#${id}_payload_type`).attr('disabled', true);
  $(`#${id}_username`).attr('disabled', true);
  $(`#${id}_password`).attr('disabled', true);
}

function addHeaderForm(index, actionPosition, input) {
  if (globalHeaderCounter) {
    globalHeaderCounter++;
  } else {
    globalHeaderCounter = index;
  }

  $(input).parent().find('#headers-container').append(
    `<div class="row w-100">
      <div class="col-xs-12 col-sm-5 my-10">
        <label for="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_headers_attributes_${globalHeaderCounter}_key">Nombre</label>
        <input class="input deactivate-on-selection input-header" type="text" value="" name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][headers_attributes][${globalHeaderCounter}][key]" id="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_headers_attributes_${globalHeaderCounter}_key">
      </div>
      <div class="col-xs-12 col-sm-5 my-10 p-relative">
        <label for="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_headers_attributes_${globalHeaderCounter}_value">Valor</label>
        <input class="input deactivate-on-selection input-header" type="text" value="" name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][headers_attributes][${globalHeaderCounter}][value]" id="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_headers_attributes_${globalHeaderCounter}_value" onfocus="showListOptions(this)" onblur="hideListOptions(this)">
      </div>
      <div class="col-xs-12 col-sm-2 my-10 p-relative">
        <input name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][headers_attributes][${globalHeaderCounter}][_destroy]" type="hidden" value="0">
        <input class="d-none deactivate-on-selection input-header" type="checkbox" value="1" name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][headers_attributes][${globalHeaderCounter}][_destroy]" id="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_headers_attributes_${globalHeaderCounter}__destroy", onchange="hideHeader(this)">
        <label class="btn btn--destroy delete-icon-headers" for="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_headers_attributes_${globalHeaderCounter}__destroy">
          <i class="fas fa-trash-alt c-red"></i>
        </label>
      </div>
    </div>`
  );
}

function addDataForm(index, actionPosition, input) {
  if (globalDataCounter) {
    globalDataCounter++;
  } else {
    globalDataCounter = index;
  }

  $(input).parent().find('#data-container').append(
    `<div class="row w-100">
      <div class="col-xs-12 col-sm-5 my-10">
        <label for="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_data_attributes_${globalDataCounter}_key">Nombre</label>
        <input class="input deactivate-on-selection input-header" type="text" value="" name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][data_attributes][${globalDataCounter}][key]" id="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_data_attributes_${globalDataCounter}_key">
      </div>
      <div class="col-xs-12 col-sm-5 my-10 p-relative">
        <label for="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_data_attributes_${globalDataCounter}_value">Valor</label>
        <input class="input deactivate-on-selection input-header" type="text" value="" name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][data_attributes][${globalDataCounter}][value]" id="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_data_attributes_${globalDataCounter}_value" onfocus="showListOptions(this)" onblur="hideListOptions(this)">
      </div>
      <div class="col-xs-12 col-sm-2 my-10 p-relative">
        <input name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][data_attributes][${globalDataCounter}][_destroy]" type="hidden" value="0">
        <input class="d-none deactivate-on-selection input-header" onchange="hideData(this)" type="checkbox" value="1" name="chat_bot[chat_bot_options_attributes][0][chat_bot_actions_attributes][${globalWebhookId || actionPosition}][data_attributes][${globalDataCounter}][_destroy]" id="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_data_attributes_${globalDataCounter}__destroy">
        <label class="btn btn--destroy delete-icon-headers" for="chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_${globalWebhookId || actionPosition}_data_attributes_${globalDataCounter}__destroy">
          <i class="fas fa-trash-alt c-red"></i>
        </label>
      </div>
    </div>`
  );
}

function setGlobalWebhookId(id) {
  globalWebhookId = id.replace("chat_bot_chat_bot_options_attributes_0_chat_bot_actions_attributes_", "");
}

function hideHeader(input) {
  $(input).parent().parent().hide();
}

function hideData(input) {
  $(input).parent().parent().hide();
}

function showListOptions(input) {
  var parent = $(input).parent();

  if (parent.find('#list-options-input').length) {
    parent.find('#list-options-input').show();
  } else {
    parent.append($('#list-options-input'));
  }

  parent.find('#list-options-input').show();
}

function hideListOptions(input) {
  $(input).parent().find('#list-options-input').hide();
}

function insertFieldInput(value, input) {
  var parent = $(input).parent().parent();
  parent.find('input').val(value);
}

function deleteOption(id, autoGenerated) {
  if (autoGenerated) {
    alert('Las opciones dinámicas no se pueden eliminar.');
  } else if (confirm('¿Estás seguro de eliminar la opción?') == true) {
    var request = $.ajax({
      url: '/retailers/' + ENV['SLUG'] + '/chat_bots/' + $('#cb-web-id').val() + '/delete_chat_bot_option',
      beforeSend: function(xhr) {xhr.setRequestHeader('X-CSRF-Token', $('meta[name="csrf-token"]').attr('content'))},
      method: "POST",
      data: { option_id: id },
      dataType: "json"
    });

    request.done(function(msg) {
      if (msg.status == 200) {
        $('#options-tree').html(null);
        $('#chat-preview').html(null);
        searchOptions('general');
      }
      showtoast(msg.message);
    });

    request.fail(function(jqXHR, textStatus) {
      showtoast(textStatus);
    });
  }
}

function addChildOption(optionId, addChildBlocked) {
  if (addChildBlocked) {
    alert('En opciones de tipo Formulario, se permite sólo una opción hija');
  } else {
    window.location = `${window.location.origin}/retailers/${$('#slug-id').val()}/chat_bots/${$('#cb-web-id').val()}/new_chat_bot_option?parent_id=${optionId}`;
  }
}

function showHideActions(value) {
  if (value === 'exec_callback' || actionSelected('#chat_bot_actions', 'exec_callback')) {
    $('#exec-endpoint-actions-container').show();
  } else {
    $('#exec-endpoint-actions-container').hide();
  }
}

function actionSelected(containerId, action) {
  var found = false;

  document.querySelectorAll(`${containerId} .selectable-action-type`).forEach(function(input) {
    if (input.value === action) {
      found = true;
    }
  });

  return found;
}

function showHideSublist() {
  var value = $('#chat_bot_chat_bot_options_attributes_0_option_type').val();

  if (value === 'form') {
    $('#sublist-option-container').show();
    $('#skip-option-container').show();
  } else {
    $('#sublist-option-container').hide();
    $('#skip-option-container').hide();
  }
}

function showAttemptInput() {
  var value = $('#chat_bot_on_failed_attempt').val();
  var elem = $('#chat_bot_on_failed_attempt_message');

  if (value === 'send_attempt_message') {
    elem.attr('disabled', false);
    elem.parent().show();
  } else {
    elem.attr('disabled', true);
    elem.parent().hide();
  }
}

$(document).ready(function() {
  $('#chat_bot_actions, #chat_bot_actions_success, #chat_bot_actions_failed').on('cocoon:after-remove', function(e, removedItem) {
    item = $(removedItem).find('.selectable-action-type');

    if (item.val() === 'jump_to_option') {
      item.removeClass('selectable-action-type');
    } else {
      item.removeClass('validate-unique');
    }

    showHideActions();
  });

  $('#chat_bot_actions').on('cocoon:before-insert', function(e, insertedItem, originalEvent) {
    removeRepeatedItem(insertedItem, '#chat_bot_actions', 'exec_callback');
    removeRepeatedItem(insertedItem, '#chat_bot_actions', 'jump_to_option');
  });

  $('#chat_bot_actions_success').on('cocoon:before-insert', function(e, insertedItem, originalEvent) {
    removeRepeatedItem(insertedItem, '#chat_bot_actions_success', 'jump_to_option');
  });

  $('#chat_bot_actions_failed').on('cocoon:before-insert', function(e, insertedItem, originalEvent) {
    removeRepeatedItem(insertedItem, '#chat_bot_actions_failed', 'jump_to_option');
  });

  showHideActions();
  showHideSublist();
  showAttemptInput();
});

function removeRepeatedItem(item, container, actionType) {
  if (actionSelected(container, actionType)) {
    $(item).find(`.selectable-action-type option[value=${actionType}]`).remove();
  }
}

function previewFile(input) {
  if (input.files && input.files[0]) {
    let reader = new FileReader();
    reader.onload = function (e) {
      if (invalidAttachmentSize(input.files[0])) {
        $('#preview-chat-bot-option-container-img').hide();
        $('#preview-chat-bot-option-container-pdf').hide();
        $('#preview-chat-bot-option-container-video').hide();
        $('#chat_bot_chat_bot_options_attributes_0_file').val('');
        $('#preview-chat-bot-option-error-msg').show();
      } else {
        $('#preview-chat-bot-option-error-msg').hide();

        if (['image/jpg', 'image/jpeg', 'image/png'].includes(input.files[0].type)) {
          $('#preview-chat-bot-option-file-img').attr('src', e.target.result);
          $('#preview-chat-bot-option-container-img').show();
          $('#preview-chat-bot-option-container-pdf').hide();
          $('#preview-chat-bot-option-container-video').hide();
        }

        if (input.files[0].type === 'application/pdf') {
          $('#preview-chat-bot-option-file-pdf span').html(input.files[0].name);
          $('#preview-chat-bot-option-container-pdf').show();
          $('#preview-chat-bot-option-container-img').hide();
          $('#preview-chat-bot-option-container-video').hide();
        }

        if (['video/mp4', 'video/3gpp'].includes(input.files[0].type)) {
          $('#preview-chat-bot-option-file-video source').attr('src', URL.createObjectURL(input.files[0]));
          $('#preview-chat-bot-option-file-video').load();
          $('#preview-chat-bot-option-container-video').show();
          $('#preview-chat-bot-option-container-pdf').hide();
          $('#preview-chat-bot-option-container-img').hide();
        }

        $('#preview-chat-bot-option-container-file').show();
        $('#current-chat-bot-option-container').hide();
      }
    }
    reader.readAsDataURL(input.files[0]);
  }
}

function removeFile() {
  $('#chat_bot_chat_bot_options_attributes_0_file').val('');
  $('#preview-chat-bot-option-container-img').hide();
  $('#preview-chat-bot-option-container-pdf').hide();
  $('#preview-chat-bot-option-container-video').hide();
  $('#current-chat-bot-option-container').show();
}

function removeAttachedFile() {
  $('#chat_bot_chat_bot_options_attributes_0_file_deleted').val(true)
  $('#chat_bot_chat_bot_options_attributes_0_file').val('');
  $('#preview-chat-bot-option-container-img').hide();
  $('#preview-chat-bot-option-container-pdf').hide();
  $('#preview-chat-bot-option-container-video').hide();
  $('#current-chat-bot-option-container').hide();
}

function invalidAttachmentSize(file) {
  if (['image/jpg', 'image/jpeg', 'image/png', 'application/pdf'].includes(file.type)) {
    return file.size > 5000000;
  } else if (['video/mp4', 'video/3gpp'].includes(file.type)) {
    return file.size > 14000000;
  }
}

function setJumpOption(option_id, option_name) {
  currentOptionId = $('#option-id').val();

  if (currentOptionId == option_id) {
    alert('La opción origen y la opción destino no pueden ser la misma.');
    return;
  }

  rootJumpOption.find("input[type='hidden']").val(option_id);
  rootJumpOption.find('.jump-option-name').html(option_name);
}

function showHideJumpOption(hideId, enableId) {
  hideInput = $(hideId);
  hideInput.parent().parent().hide();
  hideInput.attr('disabled', true);

  enableInput = $(`#${enableId}`);
  enableInput.attr('disabled', false);
}

function launchModal(input) {
  rootJumpOption = $(input).parent().parent();
  searchOptions('modal');
}
