$(function() {
  function handleAcceptedFile() {
    const igCheck = document.getElementById('template_enable_for_instagram');
    if (igCheck && igCheck.checked) {
      let file = $('#template_image').val().split('.').pop();
      if (file === 'pdf') {
        removeImage();
      }
      document.getElementById("template_image").accept = "image/jpg, image/jpeg, image/png";
    } else {
      document.getElementById("template_image").accept = "image/jpg, image/jpeg, image/png, application/pdf";
    }

    handleAcceptedAdditionalFiles();
  }

  handleAcceptedFile();
  $('.template_form input').on('change', handleAcceptedFile);
});

$('#template-question-search').on('keyup search', function() {
  getAjax(`/retailers/templates/templates_for_questions?search=${$(this).val()}`, function(data) {
    $('#templates-container').empty();
    var json = JSON.parse(data);
    json.forEach(buildQuestionList);
  });
});

$('#template-chat-search').on('keyup search', function() {
  getAjax(`/retailers/templates/templates_for_chats?search=${$(this).val()}`, function(data) {
    $('#templates-container').empty();
    var json = JSON.parse(data);
    json.forEach(buildChatList);
  });
});

function buildQuestionList(item) {
  string = `<form action="/retailers/${$('#slug-id').val()}/messages/${$('#model-id').val()}/answer_question" accept-charset="UTF-8" method="post">` +
              '<input name="utf8" type="hidden" value="✓">' +
              '<input type="hidden" name="_method" value="put">' +
              `<input type="hidden" name="authenticity_token" value="${$('meta[name="csrf-token"]').attr('content')}">` +
              `<input type="hidden" name="answer" id="answer" value="${item.answer}">` +
              '<p>' +
                `<span class="c-secondary fs-16">${item.title}</span>` +
              '</p>' +
              '<p>' +
                `<label class="c-grey fs-14">${item.answer.substring(0,140)}</label>` +
              '</p>' +
              '<input type="submit" name="commit" value="Enviar" class="btn-btn btn-submit w-100" data-disable-with="Enviar">' +
              '<hr>' +
            '</form>';

  $('#templates-container').append(string);
}

function buildChatList(item) {
  string = `<form action="/retailers/${$('#slug-id').val()}/orders/${$('#order_id').val()}/send_message" accept-charset="UTF-8" method="post">` +
              '<input name="utf8" type="hidden" value="✓">' +
              `<input type="hidden" name="authenticity_token" value="${$('meta[name="csrf-token"]').attr('content')}">` +
              `<input type="hidden" name="answer" id="answer" value="${item.answer}">` +
              '<p>' +
                `<span class="c-secondary fs-16">${item.title}</span>` +
              '</p>' +
              '<p>' +
                `<label class="c-grey fs-14">${item.answer.substring(0,140)}</label>` +
              '</p>' +
              '<input type="submit" name="commit" value="Enviar" class="btn-btn btn-submit w-100" data-disable-with="Enviar">' +
              '<hr>' +
            '</form>';

  $('#templates-container').append(string);
}

function previewImage(input) {
  if (input.files && input.files[0]) {
    let file = input.files[0];
    if (file.type === 'application/pdf' && file.size > 25*1024*1024) {
      alert('El archivo no puede pesar más de 25MB');
      removeImage();
      return;
    } else if (['image/jpg', 'image/jpeg', 'image/png'].includes(file.type) && file.size > 5*1024*1024) {
      alert('La imagen no puede pesar más de 5MB');
      removeImage();
      return;
    } else if (!['image/jpg', 'image/jpeg', 'image/png', 'application/pdf'].includes(file.type)) {
      alert('Debe seleccionar un archivo valido, JPEG/JPG o PNG no mayor a 5MB o PDF no mayor a 25MB');
      removeImage();
      return;
    }
    let reader = new FileReader();

    reader.onload = function(e) {
      const fileType = $('#template_image').val().split('.').pop();
      const src = URL.createObjectURL(file);
      if (fileType === 'pdf') {
        $('#preview-template-image').replaceWith($(`<embed id="preview-template-image" src="${src}" class="w-200 h-200" />`));
      } else {
        $('#preview-template-image').replaceWith($(`<img id="preview-template-image" src="${src}" class="w-200 h-200" />`));
      }
      $('#preview-container-image').show();
      $('#current-template-image').hide();
    }
    reader.readAsDataURL(file);
  }
}

function removeImage() {
  $('#template_image').val(null);
  $('#preview-container-image').hide();
  $('#current-template-image').show();
}

$(document).ready(function() {
  $('#additional-fast-answer').on('cocoon:before-insert', function(e, insertedItem, originalEvent) {
    const item = $(insertedItem);
    const labelFor = item.find("input[type='file']").attr('id');

    item.find('.label-for').attr('for', labelFor);
  });

  $('#additional-fast-answer').on('cocoon:after-insert', function(e, insertedItem, originalEvent) {
    checkLimitAssociations();
    handleAcceptedAdditionalFiles();
  });

  $('#additional-fast-answer').on('cocoon:after-remove', function(e, insertedItem, originalEvent) {
    checkLimitAssociations();
  });

  initializeFileLabels();
  checkLimitAssociations();
});

function checkLimitAssociations() {
  if ($('#additional-fast-answer .nested-fields:visible').length >= 5) {
    $('#add-additional-fast-answer').hide();
  } else {
    $('#add-additional-fast-answer').show();
  }
}

function initializeFileLabels() {
  let item, labelFor;

  document.querySelectorAll('.existing-answers-container').forEach(function(input) {
    item = $(input);
    labelFor = item.find("input[type='file']").attr('id');

    item.find('.label-for').attr('for', labelFor);
  });
}

function handleAcceptedAdditionalFiles() {
  let item, elem, type, file;
  const igCheck = document.getElementById('template_enable_for_instagram');

  document.querySelectorAll('.existing-answers-container, .new-answers-container').forEach(function(input) {
    item = $(input);
    elem = item.find("input[type='file']");
    type = item.find('.hidden-type-file').val();

    if (igCheck && igCheck.checked) {
      file = elem.val().split('.').pop();

      if (file === 'pdf' || type === 'file') {
        elem.val(null);
        item.find('.hidden-delete-file').val('true');
        item.find('.preview-pdf-container').hide();
        item.find('.current-additional-attach-container').hide();
      }

      elem.attr('accept', 'image/jpg, image/jpeg, image/png');
    } else {
      elem.attr('accept', 'image/jpg, image/jpeg, image/png, application/pdf');

      if (type) {
        item.find('.hidden-delete-file').removeAttr('value');
        item.find('.current-additional-attach-container').show();
      }
    }
  });
}

function previewAdditionalFile(input) {
  if (input.files && input.files[0]) {
    let item = $(input);
    const closest = $(input).closest('.root-for-closest');
    const type = fileType(input.files[0]);
    let reader = new FileReader();

    reader.onload = function (e) {
      if (invalidAttachmentSize(input.files[0])) {
        item.val('');
        closest.find('.preview-img-container, .preview-pdf-container').hide();
        closest.find('.preview-errors').show();
      } else {
        if (type === 'image') {
          closest.find('.preview-pdf-container, .preview-errors').hide();
          closest.find('.preview-img').attr('src', e.target.result);
          closest.find('.preview-img-container').show();
        } else if (type === 'pdf') {
          closest.find('.preview-img-container, .preview-errors').hide();
          closest.find('.preview-pdf-embed').attr('src', e.target.result);
          closest.find('.preview-pdf-container').show();
        }

        closest.find('.current-additional-attach-container').hide();
      }
    }

    reader.readAsDataURL(input.files[0]);
  }
}

function removeAdditionalFile(input) {
  const closest = $(input).closest('.root-for-closest');
  let item = closest.find("input[type='file']");

  item.val('');
  closest.find('.preview-img-container, .preview-pdf-container').hide();
  closest.find('.current-additional-attach-container').show();
}

function removeAdditionalAttachedFile(input) {
  const closest = $(input).closest('.root-for-closest');
  let item = closest.find("input[type='file']");

  item.val('');
  closest.find('.preview-img-container, .preview-pdf-container, .current-additional-attach-container').hide();
  closest.find('.hidden-delete-file').val(true);
}

function fileType(file) {
  if (['image/jpg', 'image/jpeg', 'image/png'].includes(file.type)) {
    return 'image';
  } else if (file.type === 'application/pdf') {
    return 'pdf';
  }
}

function invalidAttachmentSize(file) {
  if (['image/jpg', 'image/jpeg', 'image/png'].includes(file.type)) {
    return file.size > 5*1024*1024;
  } else if (file.type === 'application/pdf') {
    return file.size > 25*1024*1024;
  }
}
