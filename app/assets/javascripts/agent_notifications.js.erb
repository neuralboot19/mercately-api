let pageNumber = 1;
let totalPages;

/*
 * Subscription to update notification counter and list when a chat is assigned to an agent
*/
socket.on('agent_assignment', (data) => {
  const chatType = getChatType(data.notification_type)
  if (chatType) {
    const chatURL = `${'/retailers/' + ENV['SLUG']}/${chatType}?cid=${data.customer.customer.id}`

    const listItem = `
      <li class="p-relative h-30 unread-notification">
        <a class="no-style" href="${chatURL}"  data-id="${data.id}">
          <i class="${getChatNotificationIcon(data.notification_type)} mr-8 fa-lg"></i>
          Nuevo chat asignado: ${getCustomerName(data.customer.customer).substring(0, 15)}
        </a>
        <b class="item__cookie item__cookie_whatsapp_messages notification unread"></b>
        <span class="fs-10 f-right"> Ahora </span>
      </li>
      <li class="divider"></li>`;

    const $notificationsList = $('#notifications_list')

    if($notificationsList.find('li.no-notifications').length !== 0) {
      $notificationsList.html(listItem);
    }else {
      $notificationsList.prepend(listItem);
    }

    const unreadMessagesCounterBadge = $('.assignment_notification')
    unreadMessagesCounterBadge.html(parseInt(unreadMessagesCounterBadge.html()) + 1);
    unreadMessagesCounterBadge.show()
    const audio = new Audio('../../knock-brush.mp3');
    audio.play();
  }
});

/**
 * Assembles the customer name in the notification item
 * @param customer
 * @returns {string|*}
 */
function getCustomerName(customer) {
  if(customer.first_name && customer.last_name) {
    return `${customer.first_name} ${customer.last_name}`
  }
  if(customer.whatsapp_name) {
    return customer.whatsapp_name;
  }
  return customer.phone
}

/**
 * Returns whether the chat is whatsapp or fb messenger based on the notification type obtained from the socket
 * @param notificationType from the socket
 * @returns {string|null} notification type to be used to guess icon or chat type URL
 */
const getChatType = (notificationType) => {
  switch (notificationType) {
    case  'whatsapp':
      return 'whatsapp_chats';
    case 'messenger':
      return 'facebook_chats';
  }
  return null;
}

/**
 * Returns the font-awesome icon name based on the notification type
 * @param notificationType
 * @returns {string} FontAwesome icon name
 */
const getChatNotificationIcon = (notificationType) => {
  switch (notificationType) {
    case  'whatsapp':
      return 'fab fa-whatsapp';
    case 'messenger':
      return 'fab fa-facebook-messenger';
  }
  return 'far fa-comment-alt';
}

/**
 * Event handler to make an ajax request after clicking a notification row in order to mark the notification as read
 */
const addMarkNotificationAsReadListener = () => {
  $(document).on('click', '#notifications_list li', function(e){
    const listItem = e.target;
    $.ajax({
      url: '/api/v1/mark_notification_as_read',
      type: 'PATCH',
      data: {"agent_notification": { "id": listItem.dataset.id }},
      statusCode: {
        400: function(response) {
          console.error(response.error);
        }
      }
    });
  })
}

/**
 * Event handler that shows/hides the notifications dropdown after clicking the bell
 */
const addNotificationsDropdownToggleListener = () => {
  $(document).on("click", function(event){
    event.stopPropagation()
    $('.assignment_notification').hide();
    const $trigger = $(".notifications-button");
    if($trigger !== event.target && !$trigger.has(event.target).length){
      $("#notifications_list").hide();
    }else {
      $("#notifications_list").show();
    }
  });
}

/**
 * Event handler fired when agent clicks a customers's chat and marks all its unread existent notifications as read.
 */
const addOnChatItemClickListener = () => {
  // FIXME Fire event only on unread chats from the list
  $(document).on('click', '.chat__selector>.profile', function(e){
    e.stopPropagation()
    const customerId = e.currentTarget.getAttribute("customer-id");
    const chatType = e.currentTarget.getAttribute("chat-type");
    $.ajax({
      url: '/api/v1/mark_by_customer_as_read',
      type: 'PATCH',
      data: { "agent_notification": { "customer_id": customerId, "notification_type": chatType } },
      statusCode: {
        200: function (response) {
          $( "#notifications_list li.unread-notification" ).find('a').filter( function() {
            return  response.notification_ids.includes($(this).data("id"))
          }).parent().removeClass('unread-notification').find( "b" ).remove()
        },
        400: function (response) {
          console.error(response.error);
        },
      }
    });
  })
}

/**
 * Requests next notifications at scrolling dropdown list
 */
const addOnNotificationsListScrollListener = () => {
  const $notificationList = $('#notifications_list');
  totalPages = $notificationList.data('total-pages');
  $notificationList.scroll(function (e) {
    if ( $notificationList.scrollTop() + $(window).height() >= $notificationList.get(0).scrollHeight) {
      pageNumber++;
      if (pageNumber <= totalPages) {
        $notificationList.unbind('scroll');
        fetchNextNotificationsPage()
      }
    }
  });
}

/**
 * Retrieves a specific notifications apge
 */
const fetchNextNotificationsPage = () => {
  $.ajax({
    url: `/api/v1/notifications_list?page=${pageNumber}`,
    type: 'GET',
    statusCode: {
      200: function (response) {
        totalPages = response.total
        appendNewNotifications(response.notifications.data)
      },
      400: function (response) {
        console.error(response.error);
      },
    }
  })
}

/**
 * Appends new notifications retrieved from API to the list
 */
const appendNewNotifications = (newNotifications) => {
  const newNotificationsEl = newNotifications.map((notification) => {
    const notificationData = notification.attributes
    const chatURL = `${'/retailers/' + ENV['SLUG']}/${notificationData.chat_path}?cid=${notificationData.customer_id}`
   return `<li class="p-relative h-30 ${notificationData.status === 'unread' ? 'unread-notification' : ''}">
      <a class="no-style" href="${chatURL}"  data-id="${notification.id}">
        <i class="${notificationData.chat_type_icon} mr-8 fa-lg"></i>
        Nuevo chat asignado: ${notificationData.customer_name}
      </a>
      ${notificationData.status === 'unread' ? `<b class="item__cookie item__cookie_whatsapp_messages notification unread"></b>` : ``}
      <span class="fs-10 f-right"> ${new Intl.DateTimeFormat('es-EC', { dateStyle: 'medium', timeStyle: 'short' }).format(new Date(notificationData.created_at))} </span>
    </li>
    <li class="divider"></li>`;
  })
  const $notificationsList = $('#notifications_list')

  $notificationsList.append(newNotificationsEl);
  addOnNotificationsListScrollListener()
}

////////// AGENT ASSIGNATION NOTIFICATION END //////////

$(document).on('ready page:load', function() {
  addMarkNotificationAsReadListener();
  addNotificationsDropdownToggleListener();
  addOnChatItemClickListener();
  addOnNotificationsListScrollListener();
});
